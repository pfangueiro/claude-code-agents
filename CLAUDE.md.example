# Project: E-Commerce Platform

## 🎯 Project Context
A modern e-commerce platform built with Next.js, Node.js, and PostgreSQL. The platform handles product catalog, user authentication, shopping cart, payment processing, and order management.

## 🏗️ Project Structure
```
ecommerce-platform/
├── frontend/           # Next.js 14 app
│   ├── app/           # App router pages
│   ├── components/    # React components
│   ├── lib/          # Utilities and helpers
│   └── styles/       # Global styles
├── backend/           # Node.js Express API
│   ├── controllers/  # Route controllers
│   ├── models/       # Database models
│   ├── routes/       # API routes
│   ├── services/     # Business logic
│   └── middleware/   # Custom middleware
├── database/         # PostgreSQL migrations
└── tests/           # Test suites
```

## 🔧 Development Setup

### Prerequisites
- Node.js 20+
- PostgreSQL 15+
- Redis (for caching)
- pnpm (package manager)

### Installation
```bash
# Install dependencies
pnpm install

# Setup database
pnpm db:migrate

# Seed sample data
pnpm db:seed
```

### Running the Project
```bash
# Development mode
pnpm dev

# Run frontend only
pnpm dev:frontend

# Run backend only
pnpm dev:backend

# Run tests
pnpm test
```

## 📋 Project Conventions

### Code Style
- ESLint + Prettier configuration
- TypeScript strict mode enabled
- Functional components with hooks
- Server components where possible

### Git Workflow
- Branch naming: `feature/JIRA-123-description`
- Commit style: Conventional commits
- PR requires 2 reviews
- All tests must pass

### Architecture Decisions
- Next.js App Router for frontend
- Server components for initial load
- Zustand for client state
- React Query for server state
- Express.js REST API
- JWT authentication
- PostgreSQL with Prisma ORM

## 🤖 Agent Coordination

### Primary Tech Stack
This project primarily uses:
- Frontend: Next.js 14, React, TypeScript, Tailwind CSS
- Backend: Node.js, Express, TypeScript
- Database: PostgreSQL, Prisma ORM, Redis
- Testing: Jest, React Testing Library, Playwright

### Preferred Agents for This Project
Based on the tech stack, these agents should be prioritized:
- `typescript-expert` - Primary language for entire stack
- `frontend-architect` - Next.js and React components
- `api-builder` - Express REST API development
- `database-architect` - PostgreSQL schema design
- `test-engineer` - Jest and Playwright tests
- `infrastructure-expert` - Redis caching setup

### Project-Specific Workflows

#### Feature Development
```yaml
workflow: feature-development
steps:
  - database-architect    # Design schema changes
  - api-builder           # Create API endpoints
  - frontend-architect    # Build UI components
  - typescript-expert     # Ensure type safety
  - test-engineer         # Write tests
  - secure-coder         # Security review
  - deployment-engineer   # Deploy to staging
```

#### Performance Optimization
```yaml
workflow: performance-optimization
steps:
  - performance-optimizer  # Identify bottlenecks
  - infrastructure-expert  # Setup Redis caching
  - database-architect    # Optimize queries
  - frontend-architect    # Implement lazy loading
```

## 🚀 Deployment

### Environments
- Development: http://localhost:3000
- Staging: https://staging.example.com
- Production: https://example.com

### Deployment Process
```bash
# Build for production
pnpm build

# Run production build
pnpm start

# Deploy to staging
pnpm deploy:staging

# Deploy to production (requires approval)
pnpm deploy:production
```

## 📊 Performance Guidelines

### Performance Targets
- Page load: < 2s (LCP)
- API response: < 200ms (p95)
- Test coverage: > 80%
- Lighthouse score: > 90

### Known Issues
- Product search needs optimization for large catalogs
- Image loading on mobile needs lazy loading
- Cart state sync between tabs

## 🔒 Security Considerations

### Authentication
- Method: JWT with refresh tokens
- Access token expiry: 15 minutes
- Refresh token expiry: 7 days
- MFA enabled for admin users

### Sensitive Data
- PCI compliance for payment data
- PII encrypted at rest
- API rate limiting: 100 req/min
- CORS configured for frontend only

## 📝 Additional Notes

### External Services
- Stripe API for payments
- SendGrid for emails
- Cloudinary for image hosting
- Sentry for error tracking

### Project-Specific Commands
```bash
# Generate TypeScript types from Prisma
pnpm prisma:generate

# Run database migrations
pnpm db:migrate

# Open Prisma Studio
pnpm db:studio

# Run E2E tests
pnpm test:e2e

# Check TypeScript types
pnpm type-check

# Analyze bundle size
pnpm analyze
```

### Important Files
- `.env.local` - Frontend environment variables
- `.env` - Backend environment variables
- `prisma/schema.prisma` - Database schema
- `next.config.js` - Next.js configuration
- `tsconfig.json` - TypeScript configuration

---
*E-Commerce Platform CLAUDE.md - Last updated: 2025*